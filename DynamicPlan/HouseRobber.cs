using System;
//-----------------------------【打家劫舍 - 简单】-----------------------------
public class HouseRobber
{
    /**
    
    你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

    给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

    示例 1:

    输入: [1,2,3,1]
    输出: 4
    解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
         偷窃到的最高金额 = 1 + 3 = 4 。
    
    **/
    /**
    解题思路：

        动态规划：
        1.状态：dp[i, j] => i 代表房屋，j 代表状态：0 不偷、1 偷，
        2.状态转移方程：
            选择不偷： 那么最高金额有两种情况, 昨天也没偷 或者 昨天偷了
            dp[i, 0] = Math.Max(dp[i - 1, 0], dp[i - 1, 1]);
            选择偷：那么只能来自 昨天不偷
            dp[i, 1] = dp[i - 1, 0] + nums[i];
    **/

    public int Rob(int[] nums)
    {
        int n = nums.Length;
        if (n == 0) return 0;

        int[,] dp = new int[n, 2];
        // 初始化第一天偷 与 不偷的情况
        dp[0, 0] = 0;
        dp[0, 1] = nums[0];

        for (int i = 1; i < n; i++)
        {
            // 选择不偷： 那么最高金额有两种情况, 昨天也没偷 或者 昨天偷了
            dp[i, 0] = Math.Max(dp[i - 1, 0], dp[i - 1, 1]);
            // 选择偷：那么只能来自 昨天不偷
            dp[i, 1] = dp[i - 1, 0] + nums[i];
        }

        return Math.Max(dp[n - 1, 0], dp[n - 1, 1]);
    }

    //-----------------------------【优化】-----------------------------
    public int Rob_O(int[] nums)
    {
        int n = nums.Length;
        if (n == 0) return 0;

        // 初始化
        int dp_0 = 0;
        int dp_1 = nums[0];

        int temp;

        for (int i = 1; i < n; i++)
        {
            temp = dp_0;
            dp_0 = Math.Max(temp, dp_1);
            dp_1 = temp + nums[i];
        }

        return Math.Max(dp_0, dp_1);
    }
}