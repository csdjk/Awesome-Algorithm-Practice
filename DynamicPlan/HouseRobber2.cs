using System;
//-----------------------------【打家劫舍2 - 中等】-----------------------------
public class HouseRobber2
{
    /**
    
    你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

    给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

    示例 1:

    输入: [2,3,2]
    输出: 3
    解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

    **/
    /**
    解题思路：

        和打家劫舍1 类似，只是由于环形，
        所以：要么偷第一家， 要么偷最后一家， 要么都不偷，
        取他们三个的最大值即可，
        优化：由于第一种 和 第二种 的范围都比 第三种大 所以 最优解肯定也是在包含在前两种里

    **/

    //-----------------------------【优化后】-----------------------------
    public int Rob(int[] nums)
    {
        int n = nums.Length;
        if (n == 0) return 0;

        return Math.Max(RobRange(nums,0,n-1),RobRange(nums,1,n));
       
    }

    public int RobRange(int[] nums,int start,int end)
    {
        // 初始化
        int dp_0 = 0;
        int dp_1 = nums[start];

        int temp;

        for (int i = start+1; i < end; i++)
        {
            temp = dp_0;
            dp_0 = Math.Max(temp, dp_1);
            dp_1 = temp + nums[i];
        }

        return Math.Max(dp_0, dp_1);
    }
}